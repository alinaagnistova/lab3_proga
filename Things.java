abstract class Things {
    //конструктор с 3 по 6 строчку. Конструктор создаёт каркас класса, которому каждый новый объект класса должен соответствовать
    public Things(String name, String condition){
        this.name = name;
        this.condition = condition;
    }
    //протектед - потому что защищает нашу переменную но поле является видимым для классам-наследникам
    protected String name;
    protected String condition;
    protected Location location;
//Итак, сеттер — это метод, который изменяет (устанавливает; от слова set) значение поля.
// А геттер — это метод, который возвращает (от слова get) нам значение какого-то поля.
// Используя геттер и сеттер, мы можем контролировать доступ к важным переменным и их обновление
// (например, требуется изменить значение переменной в заданном диапазоне. В противном случае новое значение не будет присвоено).
// Геттеры и сеттеры защищают значение переменной от неожиданных изменений.
//Когда переменная скрыта модификатором private и доступна только через геттер и сеттер, она инкапсулирована.
// Поэтому реализация геттеров и сеттеров является одним из способов обеспечения инкапсуляции в коде программы.
// В третьем издании книги Джошуа Блоха «Java. Эффективное программирование» на эту проблему указано в главе 4.2:
// «Используйте в открытых классах методы доступа, а не открытые поля».
    public String getName() {

        return name;
    }
    public String getCondition() {
        return condition;
    }
    public Location getLocation() {

        return location;
    }
}
